//------------------------------------------------------------------------
// Card group overrides
//
// Note: This isn’t listed as a separate component but is used on the Card demo page
// https://designsystem.digital.gov/components/card/
//
// Can specify either 2 or 3 columnns using the [data-cols] attribute.
//
//  <div class="usa-card-group" data-cols="2">…</div>
//
// By default, it will automatically choose columns based on the number of items.
// This is done using :has() and quantity query selectors.
// However, :has() is reletively new so unsupported browsers will default
// to the 3-column layout (see https://caniuse.com/css-has).
//
// In all browsers, cards in the last row will expand to fill the space.
// This is done by using flexbox and “flex-basis: 0; flex-grow: 1”
// https://css-tricks.com/filling-space-last-row-flexbox/
//------------------------------------------------------------------------
.usa-card-group {
  $bp-2-cols: 768px;
  $bp-3-cols: 860px;
  $col-gap: $layout-card-group-col-gap;
  $row-gap-mobile: 26px;
  $row-gap-desktop: 34px;
  display: block;// override USWDS default
  margin: rem($row-gap-mobile) 0;// override USWDS default

  // Default to 3-col layout if not specified
  // 1. Only use “gap” in wide layout since iOS Safari 14.4
  //    and below doesn’t support it with flexbox (only grid).
  @include min-width($bp-3-cols) {
    display: flex;
    gap: rem($row-gap-desktop $col-gap);// [1]
    margin-bottom: rem($row-gap-desktop);
    margin-top: rem($row-gap-desktop);
  }

  // Note: Use flex-basis and flex-grow to allow items in last row to expand to fit
  // https://css-tricks.com/filling-space-last-row-flexbox/
  & > * {
    flex-grow: 1;
    margin-bottom: 0;
    margin-top: 0;

    // Don’t expand first child
    &:first-child {
      flex-grow: 0;
    }

    @include max-width($bp-3-cols - 1px) {
      &:not(:last-child) {
        margin-bottom: rem($row-gap-mobile);
      }
    }

    @include min-width($bp-3-cols) {
      margin-bottom: 0;
      flex-basis: calc(33.3% - #{$col-gap * 0.666});// multiply by (columns - 1) / columns

      // If there’s only 1 card make it full width
      &:only-child {
        flex-basis: 100%;
      }
    }
  }

  // 2-column layout styles
  // Note: Use :has() to detect when there are only 2 children
  //       https://www.matuzo.at/blog/2022/counting-children/
  &[data-cols="2"],
  &:has(> *:nth-child(2):last-child) {
    @include min-width($bp-2-cols) {
      display: flex;
      gap: rem($row-gap-desktop $col-gap);// [1]
      margin-bottom: rem($row-gap-desktop);
      margin-top: rem($row-gap-desktop);
    }

    & > * {
      @include max-width($bp-2-cols - 1px) {
        &:not(:last-child) {
          margin-bottom: rem($row-gap-mobile);
        }
      }

      @include min-width($bp-2-cols) {
        flex-basis: calc(50% - #{$col-gap * 0.5});// multiply by (columns - 1) / columns
        margin-bottom: 0;

        // If there’s only 1 card make it full width
        &:only-child {
          flex-basis: 100% !important;
        }
      }
    }
  }

  // Force 3-col layout regardless of number of items
  &[data-cols="3"] {
    & > * {
      flex-grow: 0;

      @include min-width($bp-2-cols) {
        flex-basis: calc(33.3% - #{$col-gap * 0.666}) !important;// multiply by (columns - 1) / columns
      }
    }
  }
}
