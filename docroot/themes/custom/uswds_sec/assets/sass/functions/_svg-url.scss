/// Inline SVG in url() for background-image
/// @group Main
/// @param {String} $name - SVG name
/// @param {Map} $props - SVG attributes
/// @return {String} - Inline SVG as url("data:image/svg+xml,‚Ä¶")
/// @require {variable} $url-escape-chars
/// @require {variable} $sec-svgs
/// @require {function} string-replace
/// @require {function} url-encode
/// @link https://www.sassmeister.com/gist/c2f12e64b242469d728f335ed612ae35
/// @link https://css-tricks.com/probably-dont-base64-svg/
/// @link https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
/// @link https://codepen.io/jakob-e/pen/doMoML
/// @link https://yoksel.github.io/url-encoder/
/// @link https://www.sassmeister.com/gist/594de57bc18015df9dc568e96aff9075
/// @example scss
///   .foo {
///     background-image: fs-svg-url('chevDown', (fill: none, stroke: red, stroke-width: 1px));
///   }
@use "sass:map";
@use "../vars/svg-icons" as *;
@use "../functions/string-replace" as *;
@use "../functions/url-encode" as *;

@function svg-url($name, $props: false, $svg-map: $sec-svgs) {
  @if not $svg-map {
    @error 'üî¥  $svg-map doesn‚Äôt exist';
    @return false;
  }

  @if not type-of($svg-map) == 'map' {
    @error 'üî¥  $svg-map isn‚Äôt a valid Sass map';
    @return false;
  }

  @if not map.has-key($svg-map, $name) {
    @error 'üî¥  icon ‚Äú#{$name}‚Äù not found in $svg-map';
    @return false;
  }

  $svg: map.get($svg-map, $name);

  // Add custom properties
  @if $props {
    $props-string: '';

    @each $key, $val in $props {
      $props-string: $props-string + " #{$key}='#{$val}'";
    }

    $svg: string-replace($svg, '<svg', '<svg' + $props-string);
  }

  @return url("data:image/svg+xml,#{unquote(url-encode($svg))}");
}
