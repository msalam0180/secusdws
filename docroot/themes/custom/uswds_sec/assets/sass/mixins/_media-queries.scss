/// Media query mixin
/// @param {Number | Map} $conditions - Width or map of conditions
///
/// @example scss
///   @include mq((min-width: 600px)) {‚Ä¶}
///
///   @include mq((min-width: 600px, max-width: 900px, min-height: 500px, min-aspect-ratio: "1/1")) {‚Ä¶}
///
/// @ignore Convert units to ems when applicable http://zellwk.com/blog/media-query-units/
/// @ignore Note: EMs in media queries are relative to the initial browser font-size (16px) http://www.w3.org/TR/css3-mediaqueries/#units
/// @ignore Demo: http://www.sassmeister.com/gist/908ff8ee2e2e0b18f768fcbc87df385c
@use "sass:math";
@use "sass:string";

@mixin mq($conditions) {
  // Check if $conditions is a valid map
  @if type-of($conditions) != 'map' {
    @error 'üî¥ ‚Äú#{$conditions}‚Äù is not a valid Sass map';
  }
  @else {
    $mq-conditions: '';

    // Convert map to properly formatted media query string
    @each $type, $value in $conditions {

      // If value is a number, we may need to convert to ems
      @if type-of($value) == 'number' {

        // Convert px to em
        @if unit($value) == 'px' {
          $value: math.div($value, 16px) * 1em;
        }

        // Convert rem to em
        @else if unit($value) == 'rem' {
          $value: math.div($value, 1rem) * 1em;
        }
      }

      // Use str-insert() with -1 index to append value to the end
      $mq-conditions: string.insert($mq-conditions, 'and (#{$type}: #{$value}) ', -1);
    }

    // Output the media query
    @media all #{$mq-conditions} {
      @content;
    }
  }
}

/// Min-width media query helper
/// @require {mixin} mq
/// @param {Number} $width - Breakpoint width
///
/// @example scss
///   @include min-width(960px) {‚Ä¶}
///
@mixin min-width($width) {
  @include mq((min-width: $width)) {
    @content;
  }
}

/// Max-width media query helper
/// @require {mixin} mq
/// @param {Number} $width - Breakpoint width
///
/// @example scss
///   @include max-width(960px) {‚Ä¶}
///
@mixin max-width($width) {
  @include mq((max-width: $width)) {
    @content;
  }
}

/// Min-height media query helper
/// @require {mixin} mq
/// @param {Number} $height - Breakpoint height
///
/// @example scss
///   @include min-height(500px) {‚Ä¶}
///
@mixin min-height($height) {
  @include mq((min-height: $height)) {
    @content;
  }
}

/// Max-height media query helper
/// @require {mixin} mq
/// @param {Number} $height - Breakpoint height
///
/// @example scss
///   @include max-height(500px) {‚Ä¶}
///
@mixin max-height($height) {
  @include mq((max-height: $height)) {
    @content;
  }
}
