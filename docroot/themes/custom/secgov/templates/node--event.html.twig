{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set limeLight = false %}
<article{{ attributes.addClass('upcoming-events') }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer>
      {{ author_picture }}
      <div{{ author_attributes }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}
  <div{{ content_attributes.addClass('article-content') }}>

  <span class="field_sec_event_date">
    {{ content.field_sec_event_date|render|striptags|trim|replace({"EDT":"ET", "EST":"ET"}) }}
      {% if node.field_show_end_date.0.value %}
        &ndash;
        {{ content.field_sec_event_end_date|render|striptags|trim|replace({"EDT":"ET", "EST":"ET"}) }}
      {% endif %}
  </span>

  {% if node.field_webcast.value %}
    <br class="clearfix" />
    {% if content.field_webcast is not empty and content.field_webcast['#items']|length > 1 %}
      <div id="event-webcasts-top">{{ content.field_webcast }}</div>
    {% endif %}
    {% set break = false %}
    {% for key, value in node.field_webcast if not break -%}
      {% set webcast = value.entity %}
      {% if webcast.field_media_id.value %}
        {%  set limeLight = true %}
        {% if not request.webcast or (request.webcast == webcast.nid.value) %}
            {{ attach_library("sec_webcast/archive_player") }}
            <h1 id="head1">
                {% if webcast.field_display_title.value is not empty %}
                    {{ webcast.field_display_title.value }}
                {% else %}
                    <div class="hidden">{{ webcast.title.value }}</div>
                {% endif %}
            </h1>
            <div id="videoplayer">
              <div id="limelight_player_92795" data-mediaid="{{ webcast.field_media_id.value }}" tabindex="0"></div>
            </div>

            <!-- visible HTML buttons for accessibility

            <div id="htmlbuttons">
              <input type="button" id="btn_play_pause" alt="Play/Pause" value="Play" onClick="playPause()" />
              <input type="button" id="btn_volume_up" alt="Volume Up" value="Volume Up" onClick="changeVolume(0.1)" />
              <input type="button" id="btn_volume_down" alt="Volume Down" value="Volume Down" onClick="changeVolume(-0.1)" />
              <input type="button" id="btn_mute" alt="Mute" value="Mute" onClick="mute()" />
            </div>
			-->
            <p>{{ webcast.body.value }}</p>
            {% set break = true %}
        {% endif %}
      {% else %}
        {% set endDatePlus1Hour = node.field_sec_event_end_date.value|timezoneDate|date_modify("+1 hour") %}
        {% if endDatePlus1Hour < date("now")%}
          {% if node.field_no_webcast_archive.value == 0 %}
          <h4><em>Webcast archive will be posted soon</em></h4>
          {% endif %}
        {% elseif webcast.field_webcast_src.entity.name.value == "None" %}
          <h1 id="head1">{{ webcast.field_display_title.value }}</h1>
          <p>{{ webcast.body.value }}</p>
        {% else %}
          {{ attach_library("sec_webcast/video_player") }}
          <div class="live-player {{ not logged_in ? 'hidden' }}">
            <h1 id="head1">{{ webcast.field_display_title.value }}</h1>
            {% if logged_in %}
              <div class="alert-box webcast notice no-icon">
                <h2>Internal Webcast Preview</h2>
                <p>Authenticated Drupal users will always see the live webcast stream, even before an event has started. To view the page as seen by external
                  users, please log out of Drupal.</p>
              </div>
            {% endif %}
              <div class="sample-player">
                {# @todo remove data-stream #}
                <div id="akamai-media-player" data-primary="{{ webcast.field_webcast_src.entity.field_primary_source.value }}" data-secondary="{{ webcast.field_webcast_src.entity.field_secondary_source.value }}" data-config='{{ webcast.field_webcast_config.value }}'></div>
              </div>
            <p>{{ webcast.body.value }}</p>
          </div>
        {% endif %}
        {% set break = true %}
      {% endif %}

    {%- endfor %}
  {% endif %}

      {% set eventStatus = content.field_cancelled_postponed|render|striptags|trim %}
      {% set eventClass = '' %}
      {% if eventStatus is same as('Cancelled') %}
          {% set eventClass = ' event-cancelled' %}
      {% endif %}
      {% if eventStatus is not empty %}
        <p>

          <span class="field_cancelled_postponed{{ eventClass }}">
          {{ eventStatus }}
          </span>
          <br />
        </p>
      {% endif %}


    {% if content.field_add_to_calendar[0]["#markup"] is not same as("Add to Calendar Disabled") %}
      <div class="event_add_cal">  {{ content.field_add_to_calendar}}   </div>
    {% endif %}

    {{ content.body }}

    {{ content.title }}

    {{ content.field_additional_information }}

	{{ content.field_location }}

    {% if content.field_location|render is not empty %}
      {{ content.field_geofield }}
    {% endif %}

    <br class="clearfix" />
    {% if content.field_contact is not empty %}
    {{ content.field_contact }}
    {% endif %}

    {{ content.field_attached_files }}
      <br class="clearfix" />
      {% if node.field_webcast.value and content.field_webcast is not empty %}
      <div id="event-webcasts-bottom">{{ content.field_webcast }}</div>
      {% endif %}
  </div>
  <div id="sidebar-second">
    <div id="webcast-trouble">
        {% if help_block_archived and limeLight or node.field_event_type.value == 'hidden' %}
                {{ help_block_archived }}
            {% elseif help_block_live %}
                {{ help_block_live }}
        {% endif %}
    </div>
    {{ content.field_primary_media }}
  </div>

</article>
