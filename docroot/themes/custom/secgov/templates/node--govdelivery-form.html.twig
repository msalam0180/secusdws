{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
<div class="govdelivery-subscription topic-id-{{ node.field_govdelivery_topic_id.value }}">
  <div class="panel">
    <h2>{{ node.field_display_title.value }}</h2>
    <p>{{ node.body.value }}</p>
    <form accept-charset="UTF-8" action="https://public.govdelivery.com/accounts/USSEC/subscribers/qualify" id="GD-snippet-form" method="post" name="GD-snippet-form">
      <input name="utf8" type="hidden" value="&#x2713;">
      <input name="authenticity_token" type="hidden" value="rNLpZE6ui1SUXb98DT0ck6yojFmsiphJS29lz62OQ/k=">
      <input name="topic_id" type="hidden" id="topic_id" value="{{ node.field_govdelivery_topic_id.value }}">
      <div class="row">
        <div class="row collapse">
          <label class="show-for-sr" for="email">E-mail Updates</label> <input id="email" name="email" onblur="if (this.value == '') {this.value = 'Email address'; this.style.color='#b1b1b1';} else if (this.value != '') {this.style.color='#000';}" onfocus="if(this.value == 'Email address') {this.value = ''; this.style.color='#000';}" title="Enter email address" type="text" value="Email address">
        </div>
      </div>
      <div class="row">
        <input class="form_button small button" name="commit" type="submit" value="Subscribe">
      </div>
    </form>
    <script>
      //<![CDATA[
        var GOVDSNIPPET = function() {
          var form  = document.getElementById('GD-snippet-form');
          var typeSelect = form.getElementsByTagName('select')[0];
          var getStyleType = function(type) {
            return typeSelect.value === type ? 'block' : 'none';
          };
          var toggleType = function() {
            form.getElementsByTagName('li')[2].style.display = getStyleType('email');
            form.getElementsByTagName('li')[1].style.display = getStyleType('phone');
          };
          if (typeof typeSelect != "undefined" && typeSelect.addEventListener) {
            typeSelect.addEventListener('change', toggleType);
          } else if (typeof typeSelect != "undefined" && typeSelect.attachEvent)  {
            typeSelect.attachEvent('onchange', toggleType);
          }
        }();
      //]]>
    </script>
  </div>
</div>
