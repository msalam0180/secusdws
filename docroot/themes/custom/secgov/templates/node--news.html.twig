{#
/**
* @file
* Default theme implementation to display a node.
*
* Available variables:
* - node: The node entity with limited access to object properties and methods.
*   Only method names starting with "get", "has", or "is" and a few common
*   methods such as "id", "label", and "bundle" are available. For example:
*   - node.getCreatedTime() will return the node creation timestamp.
*   - node.hasField('field_example') returns TRUE if the node bundle includes
*     field_example. (This does not indicate the presence of a value in this
*     field.)
*   - node.isPublished() will return whether the node is published or not.
*   Calling other methods, such as node.delete(), will result in an exception.
*   See \Drupal\node\Entity\Node for a full list of public properties and
*   methods for the node object.
* - label: The title of the node.
* - content: All node items. Use {{ content }} to print them all,
*   or print a subset such as {{ content.field_example }}. Use
*   {{ content|without('field_example') }} to temporarily suppress the printing
*   of a given child element.
* - author_picture: The node author user entity, rendered using the "compact"
*   view mode.
* - metadata: Metadata for this node.
* - date: Themed creation date field.
* - author_name: Themed author name field.
* - url: Direct URL of the current node.
* - display_submitted: Whether submission information should be displayed.
* - attributes: HTML attributes for the containing element.
*   The attributes.class element may contain one or more of the following
*   classes:
*   - node: The current template type (also known as a "theming hook").
*   - node--type-[type]: The current node type. For example, if the node is an
*     "Article" it would result in "node--type-article". Note that the machine
*     name will often be in a short form of the human readable label.
*   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
*     teaser would result in: "node--view-mode-teaser", and
*     full: "node--view-mode-full".
*   The following are controlled through the node publishing options.
*   - node--promoted: Appears on nodes promoted to the front page.
*   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
*     teaser listings.
*   - node--unpublished: Appears on unpublished nodes visible only to site
*     admins.
* - title_attributes: Same as attributes, except applied to the main title
*   tag that appears in the template.
* - content_attributes: Same as attributes, except applied to the main
*   content tag that appears in the template.
* - author_attributes: Same as attributes, except applied to the author of
*   the node tag that appears in the template.
* - title_prefix: Additional output populated by modules, intended to be
*   displayed in front of the main title tag that appears in the template.
* - title_suffix: Additional output populated by modules, intended to be
*   displayed after the main title tag that appears in the template.
* - view_mode: View mode; for example, "teaser" or "full".
* - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
* - page: Flag for the full page state. Will be true if view_mode is 'full'.
* - readmore: Flag for more state. Will be true if the teaser content of the
*   node cannot hold the main body content.
* - logged_in: Flag for authenticated user status. Will be true when the
*   current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
*   is an administrator.
*
* @see template_preprocess_node()
*
* @todo Remove the id attribute (or make it a class), because if that gets
*   rendered twice on a page this is invalid CSS for example: two lists
*   in different view modes.
*
* @ingroup themeable
*/
#}

{%
  set classes = [
    'news'
  ]
%}


<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
      <div{{ author_attributes }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
  {% endif %}

  {% set newsType = content.field_news_type_news[0]|render|striptags|lower|replace({' ':'-'})  %}
  <div{{ content_attributes.addClass('article-content news') }}>
    {{ content.field_news_type_news }}
    <div class="content aside {{ newsType }}">
      <h1 class="article-title">{{ field_display_title }}</h1>
      {% set articleDate = node.field_date.value|apdate  %}
      {% set publishDate = node.field_publish_date.value|trim|apdate  %}

      {% if newsType is same as('press-release') %}
        {{ content.field_sub_title }}
        <p class="release-number">FOR IMMEDIATE RELEASE<br>
          {{ node.field_release_number[0].value }}
        </p>
        <p class="article-location-publishdate">
          {% if content.field_location_news %}{{ node.field_location_news[0].value }}, {% endif %}
          {% if content.field_publish_date %}{{ publishDate }}{% endif %} &mdash;
        </p>
      {% endif %}

      {% if newsType is same as('speech') or newsType is same as('testimony') or newsType is same as('statement') %}


        <div class="article-person-position">
        {% if node.field_speaker_name_and_title.value %}
            {{ content.field_speaker_name_and_title }}
        {% else %}
          {% for person in node.field_person %}
            {# Determine Speaker Position by checking position history #}
            {% set positionTitle = '' %}
            {% set positionType = '' %}

            {% set firstName = person.entity.field_first_name_secperson.value %}
            {% set lastName = person.entity.field_last_name_secperson.value %}
            {% set enable_bio = person.entity.field_enable_biography_page.value %}
            {% set photo = person.entity.field_photo_person.value %}
            {% for item in person.entity.field_position_history_paragraph %}
                {% if item.entity.field_from.value < node.field_publish_date.value %}
                    {% if item.entity.field_to.value > node.field_publish_date.value %}
                        {% set positionType = item.entity.field_position_category.value == 'Chair' ? 'Chairman' : item.entity.field_position_category.value %}
                        {% set positionTitle = item.entity.field_position_title.value %}
                    {% endif %}
                {% endif %}
            {% endfor %}
            <div class="secperson-info">
            {% if person.entity.field_enable_biography_page.value %}
              <a href="{{ path('entity.node.canonical', {'node': person.entity.id()})|drupal_escape }}">
            {% endif %}
            {{ content.field_person[loop.index0] }}
            <p class="calculated_field_person_title{% if photo %} photo-attached{% endif %}">
            {% if positionType is same as('Chairman') and positionTitle == true %}
              {{ positionTitle }} {{ firstName }} {{ lastName }}
              {% elseif positionType is same as('Chairman') and positionTitle == false %}
              {{ positionType }} {{ firstName }} {{ lastName }}
            {% elseif positionType is same as('Commissioner') %}
              {{ positionType }} {{ firstName }} {{ lastName }}
            {% else %}
              {{ firstName }} {{ lastName }}<br/><em>{{ positionTitle }}</em>
            {% endif %}
            </p>
            {% if person.entity.field_enable_biography_page.value %}
              </a>
            {% endif %}
          </div>
          {% endfor %}
        {% endif %}
        </div>
        {% if newsType is same as('speech') or newsType is same as('testimony') %}
              {% if content.field_sub_title %}
                <p class="article-subtitle">{{ content.field_sub_title|render|striptags|trim }}</p>
              {% endif %}
              {% if content.field_location_news %}
                <p class="article-location">{{ node.field_location_news[0].value }}</p>
              {% endif %}
        {% endif %}
            {% if content.field_publish_date %}
              <p class="article-publishdate">{{ node.field_publish_date.value|apdate }}</p>
            {% endif %}
      {% endif %}

      {{ content.body }}

      {% if node.field_media_file_upload.entity.field_media_file.entity.fileuri %}
        {% set fileURI = node.field_media_file_upload.entity.field_media_file.entity.fileuri %}
        {% set fileExt = fileURI|split('.')|last %}

        <div class="article-file-download">
          <h3><strong>Download:</strong></h3>
          <a class="icon" href="{{ file_url(fileURI) }}" target="_blank">
            <div class="triangle"></div>{{ fileExt }}
          </a>
          {{ content.field_media_file_upload }}
        </div>
      {% endif %}

      {% if newsType is same as('press-release') %}
        <p class="end-of-pr">###</p>
      {% endif %}

      {% if content.field_more_about_this_topic %}
      <div class="article-more-topics">
        {{ content.field_more_about_this_topic }}
      </div>
      {% endif %}
    </div>

    <div id="sidebar-second">
      {% if content.field_top_right_column|render|trim is not empty %}
      <div class="block">
        {{ content.field_top_right_column }}
      </div>
      {% endif %}

      {% if content.field_related_materials %}
      <div class="block related-materials">
        {{ content.field_related_materials }}
      </div>
      {% endif %}
    </div>
  </div>

  {% if articleDate is not null and articleDate is not same as(" , ") %}
    <div class="article-date modified">Modified: {{ articleDate }}</div>
  {% endif %}

</article>

