<?php

use Drupal\Core\Render\BubbleableMetadata;
/**
* Implements hook_tokens(). Replaces token of Article subtype 'Other' to empty on nodes.
* 
* @param string $type
*   The machine-readable name of the type (group) of token being replaced, such as 'node', 'user', or another type defined by a hook_token_info() implementation.
*
* @param array $tokens
*  An array of tokens to be replaced. The keys are the machine-readable token names, and the values are the raw [type:token] strings that appeared in the original text.
*
* @param array $data
*  An associative array of data objects to be used when generating replacement values, as supplied in the $data parameter to \Drupal\Core\Utility\Token::replace().
*
* @param array $options
* An associative array of options for token replacement; see \Drupal\Core\Utility\Token::replace() for possible values.
*
* @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
* The bubbleable metadata. Prior to invoking this hook, \Drupal\Core\Utility\Token::generate() collects metadata for all of the data objects in $data. For any data sources not in $data, but that are used by the token replacement logic, such as global configuration (e.g., 'system.site') and related objects (e.g., $node->getOwner()), implementations of this hook must add the corresponding metadata.
*
* @return array 
An associative array of replacement values, keyed by the raw [type:token] strings from the original text. The returned values must be either plain text strings, or an object implementing MarkupInterface if they are HTML-formatted.
*/
function sec_file_urls_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
 $replacements = [];

 if ($type == 'node' && !empty($data['node'])) {
   $file = $data['node'];
   foreach ($tokens as $name => $original) {
		
		 switch ($name) {
			 case 'field_article_sub_type_secart':
			  
			   if ($file->field_article_sub_type_secart->value == "Data-Other"){				 
			
               $replacements[$original] = "";
			   }
			   
			 break;
		 }
	} 
 return $replacements;
 } 
}
