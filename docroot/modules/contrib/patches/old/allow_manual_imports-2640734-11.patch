diff --git a/drush/default_content.drush.inc b/drush/default_content.drush.inc
index c062ca2..daa443b 100644
--- a/drush/default_content.drush.inc
+++ b/drush/default_content.drush.inc
@@ -5,6 +5,8 @@
  * Drush integration for the default_content module.
  */
 
+use Drush\Log\LogLevel;
+
 /**
  * Implements hook_drush_command().
  */
@@ -41,6 +43,16 @@ function default_content_drush_command() {
     'aliases' => ['dcem'],
     'required-arguments' => 1,
   ];
+  $items['default-content-import'] = [
+    'description' => dt('Imports or updates the content provided by installed modules and default profile.'),
+    'arguments' => [
+      'module' => dt('The name of the module or profile. If omitted, by all content from enabled modules and default profile will be imported.'),
+    ],
+    'options' => [
+      'update' => dt('Update existing entities.'),
+    ],
+    'aliases' => ['dci'],
+  ];
 
   return $items;
 }
@@ -97,11 +109,67 @@ function drush_default_content_export_references($entity_type_id, $entity_id = N
  *
  * @param string $module_name
  *   The module name to export.
+ *
+ * @return null|false
+ *   FALSE if the passed module or profile doesn't exist or it's uninstalled.
  */
 function drush_default_content_export_module($module_name) {
+  if (!_drush_default_content_valid_module($module_name)) {
+    return FALSE;
+  }
   /** @var \Drupal\default_content\DefaultContentManagerInterface $manager */
   $manager = \Drupal::service('default_content.manager');
   $serialized_by_type = $manager->exportModuleContent($module_name);
   $module_folder = \Drupal::moduleHandler()->getModule($module_name)->getPath() . '/content';
   $manager->writeDefaultContent($serialized_by_type, $module_folder);
 }
+
+/**
+ * Imports or updates content provided in enabled modules and default profile.
+ *
+ * @param string|null $module
+ *   (optional) An installed module or the default profile. If passed, the
+ *   import will limit to this module or profile. Defaults to NULL.
+ *
+ * @return null|false
+ *   FALSE if the passed module or profile doesn't exist or it's uninstalled.
+ */
+function drush_default_content_import($module = NULL) {
+  if (!_drush_default_content_valid_module($module)) {
+    return FALSE;
+  }
+  $update_existing = drush_get_option('update', FALSE);
+  $modules = !empty($module) ? [$module] : array_keys(\Drupal::config('core.extension')->get('module'));
+  $default_content_manager = \Drupal::service('default_content.manager');
+  $total = 0;
+  $translation = \Drupal::translation();
+  foreach ($modules as $module) {
+    if ($count = count($default_content_manager->importContent($module, $update_existing))) {
+      drush_log($translation->formatPlural($count, '@module: 1 entry', '@module: @count entries', ['@module' => $module]), LogLevel::OK);
+      $total += $count;
+    }
+  }
+  if ($total) {
+    drush_log($translation->formatPlural($total, 'Total: 1 entry', 'Total: @count entries'), LogLevel::OK);
+  }
+  else {
+    drush_log(dt('No content has been imported.'), LogLevel::WARNING);
+  }
+}
+
+/**
+ * Validates that a module or a profile exists and is installed.
+ *
+ * @param string|null $module
+ *   An installed module or the default profile. If not passed, the validation
+ *   passes.
+ *
+ * @return bool
+ *   TRUE if the passed module or profile name validates.
+ */
+function _drush_default_content_valid_module($module) {
+  if (!empty($module) && !\Drupal::moduleHandler()->moduleExists($module)) {
+    return drush_set_error('INVALID_MODULE', dt("Module or profile '@module' doesn't exist or is uninstalled.", ['@module' => $module]));
+  }
+  return TRUE;
+}
diff --git a/src/DefaultContentManager.php b/src/DefaultContentManager.php
index 40acca2..22da81b 100644
--- a/src/DefaultContentManager.php
+++ b/src/DefaultContentManager.php
@@ -147,7 +147,7 @@ class DefaultContentManager implements DefaultContentManagerInterface {
   /**
    * {@inheritdoc}
    */
-  public function importContent($module) {
+  public function importContent($module, $update_existing = FALSE) {
     $created = array();
     $folder = drupal_get_path('module', $module) . "/content";
 
@@ -220,8 +220,25 @@ class DefaultContentManager implements DefaultContentManagerInterface {
           $class = $definition['serialization_class'];
           $entity = $this->serializer->deserialize($contents, $class, 'hal_json', array('request_method' => 'POST'));
           $entity->enforceIsNew(TRUE);
-          $entity->save();
-          $created[$entity->uuid()] = $entity;
+          
+          // Allow existing entities overwrite.
+          if ($old_entity = $this->entityRepository->loadEntityByUuid($entity_type_id, $entity->uuid())) {
+            if ($update_existing) {
+              $entity->{$entity->getEntityType()->getKey('id')} = $old_entity->id();
+              $entity->setOriginalId($old_entity->id());
+              $entity->enforceIsNew(FALSE);
+              try {
+                $entity->setNewRevision(FALSE);
+              } catch (\LogicException $e) {}
+            }
+          }
+          else {
+            $entity->enforceIsNew(TRUE);
+          }
+          if (!$old_entity || $update_existing) {
+            $entity->save();
+            $created[$entity->uuid()] = $entity;
+          }
         }
       }
       $this->eventDispatcher->dispatch(DefaultContentEvents::IMPORT, new ImportEvent($created, $module));
diff --git a/src/DefaultContentManagerInterface.php b/src/DefaultContentManagerInterface.php
index fdf67a9..9c63f22 100644
--- a/src/DefaultContentManagerInterface.php
+++ b/src/DefaultContentManagerInterface.php
@@ -20,11 +20,13 @@ interface DefaultContentManagerInterface {
    *
    * @param string $module
    *   The module to create the default content for.
+   * @param bool $update_existing
+   *   (optional) Force updating existing entities. Defaults to FALSE.
    *
    * @return array[\Drupal\Core\Entity\EntityInterface]
    *   The created entities.
    */
-  public function importContent($module);
+  public function importContent($module, $update_existing = FALSE);
 
   /**
    * Exports a single entity as importContent expects it.
