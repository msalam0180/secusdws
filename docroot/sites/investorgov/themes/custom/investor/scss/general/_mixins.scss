// TODO: Clean Out File

// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility

@mixin element-invisible {
  // scss-lint:disable ImportantRule
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

.element-invisible{@include element-invisible}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  // scss-lint:disable ImportantRule
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

//Rem Fallback http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*strip-unit($base-font-size)}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}


/*
 * Retina Sprites for Compass
 * by:              Andreas Sahle
 * forked from:     Retina-Sprites-for-Compass by Gaya Kessler
 * @see: https://github.com/Gaya/Retina-Sprites-for-Compass
 * last update:     04/13/14
 *
 * NOTE: This is a fork of the fork.
 *
 * Usage:
 * 1. create a folder in your image directory (in this case 'sprite-images').
 * 2. create sprite images for pixel ratio 1 screens and put them in the folder.
 * 4. create sprite images for pixel ratio 2 screens and put them in the folder,
 *    use the same filenames with a '-2x' suffix.
 * 5. use the sprite-image in your Sass/Scss using: '@include use-sprite(<sprite-name>)'
 */

// //first we'll define the folder where the sprites are and their layout
// $sprite-images: sprite-map("sprite-images/*.png", $layout: vertical, $spacing: 10px) !default;
// $sprite-high-res-suffix: '-2x' !default;
//
//
// //Sprite mixin, works perfectly with standard defines
// @mixin use-sprite($sprite, $sprite-retina: true, $sprite-map: $sprite-images) {
//   $sprite-high-res: #{$sprite}#{$sprite-high-res-suffix};
//   background-image: sprite-url($sprite-map);
//   background-position: sprite-position($sprite-map, $sprite);
//   background-repeat: no-repeat;
//   overflow: hidden;
//   height: image-height(sprite-file($sprite-map, $sprite));
//   width: image-width(sprite-file($sprite-map, $sprite));
//
//   @if $sprite-retina {
//     @media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min--moz-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 144dppx) {
//       background-size: (image-width(sprite-path($sprite-map)) / 2) (image-height(sprite-path($sprite-map)) / 2);
//       background-position: nth(sprite-position($sprite-map, $sprite-high-res), 1)/2 nth(sprite-position($sprite-map, $sprite-high-res), 2)/2;
//       height: image-height(sprite-file($sprite-map, $sprite));
//       width: image-width(sprite-file($sprite-map, $sprite));
//     }
//   }
//
// }


//Preferred version of clearfix
@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

//Simple mixin for applying font styles
@mixin font-weight-color-size($font, $weight, $color, $size) {
  font-family: $font;
  font-weight: $weight;
  color: $color;
  font-size: #{$size}rem;
}

// various components

@mixin arrow($place, $main, $side1, $side2, $margin, $size) {
  #{'&:' + $place} {
    content: '';
    position: relative;
    display: inline-block;
    line-height: 0;
    margin-top: .5rem;
    margin-bottom: -.1rem;
    #{'margin-' + $margin}: 1rem;
    width: 0;
    height: 0;
    #{'border-' + $side1}: #{$size + 'px'} solid transparent;
    #{'border-' + $side2}: #{$size + 'px'} solid transparent;
    #{'border-' + $main}: #{$size + 'px'} solid;
  }
}

@mixin no-arrow($place) {
  #{'&:' + $place} {
    display: none;
  }
}

@mixin button($width) {
  display: inline-block;
  @include font-weight-color-size($font_secondary, $font_secondary_weight_extra_bold, $gray_white, 2);
  line-height: 2.2rem;
  height: auto;
  width: #{$width + 'px'};
  margin: 0;
  padding: 1.2rem 0;
  text-transform: uppercase;
  text-decoration: none;
  text-shadow: none;
  background: $primary_3;
  text-align: center;
  border-radius: 0;
  border: 2px solid $gray_1c;

  &:hover {
    background: $secondary_1a;
    border-bottom: 2px solid $gray_1c;
  }

  &:visited {
    color: $gray_white;
  }
}

@mixin header-with-rule($width) {
  > .block__title {
    position: relative;
    width: #{$width + 'px'};
    margin: 0 auto;
    text-align: center;
    background: $gray_white;
    padding-bottom: 1.8rem;
/**
    @include breakpoint($mobile-to-tablet) {
      max-width: 75%;
      // padding-bottom: 2.8rem;
    }
**/
  }

  &:before {
    content: "";
    position: absolute;
    padding-right: 100%;
    left: 0;
    margin-top: 22px;
    border-top: 2px solid $primary_3;
  }
}




// landing pages blocks colors #1

@mixin home-block-blue() {
  background: $primary_1;
  .group-homepage-block-header, .group-header {
    background: $primary_3;
  }
  .field--promoted-link a {
    color: $aquamarine;
  }
  .field--block-body, .field--block-body-view .views-row, .more-link, .field--more-link, > ul {
    p, li {
      color: $gray_white;
    }
    a {
      color: $fountain-blue;
    }
  }
}

@mixin home-block-red() {
  background: $secondary_1b;
  .group-homepage-block-header, .group-header, .book-navigation__header {
    background: $cinnamon;
  }
  .field--promoted-link a {
    color: $primary_1;
  }
  .field--block-body, .field--block-body-view .views-row, .more-link, .field--more-link, .menu, > ul {
    p, li {
      color: $bunker-black;
    }
    a {
      color: $primary_1;
    }
  }
}

@mixin home-block-gray() {
  background: $gray_1d;
  .group-homepage-block-header, .group-header {
    background: $gray_1b;
  }
  .field--promoted-link a {
    color: $dark-teal;
  }
  .field--block-body, .field--block-body-view .views-row, .more-link, .field--more-link, > ul {
    p, li {
      color: $bunker-black;

      a {
        color: $dark-teal;
      }
    }
    a {
      color: $dark-teal;
    }
  }
}

@mixin home-block-turquoise() {
  background: $primary_3;
  .group-homepage-block-header, .group-header {
    background: $primary_1;
  }
  .field--promoted-link a {
    color: $primary_1;
  }
  .field--block-body, .field--block-body-view .views-row, .more-link, .field--more-link, > ul {
    p, li {
      color: $gray_white;
    }
    a {
      color: $primary_1;
    }
  }
}


@mixin masonry-1() {
  .views-row:nth-of-type(4n+1) {
    .entity-bean {
      background: $primary_1;
    }
    .group-header {
      background: $primary_3;
    }
    .group-middle {
      p, li {
        color: $gray_white;
      }
      a {
        color: $aquamarine;
      }
    }
  }
  .views-row:nth-of-type(4n+2) {
    .entity-bean {
      background: $secondary_1b;
    }
    .group-header {
      background: $cinnamon;
    }
    .group-middle {
      p, li {
        color: $bunker-black;
      }
      a {
        color: $primary_1;
      }
    }
  }
  .views-row:nth-of-type(4n+3) {
    .entity-bean {
      background: $gray_1d;
    }
    .group-header {
      background: $gray_1b;
    }
    .group-middle {
      p, li {
        color: $bunker-black;
      }
      a {
        color: $dark-teal;
      }
    }
  }
  .views-row:nth-of-type(4n+4) {
    .entity-bean {
      background: $primary_3;
    }
    .group-header {
      background: $primary_1;
    }
    .group-middle {
      p, li {
        color: $gray_white;
      }
      a {
        color: $primary_1;
      }
    }
  }
}

@mixin masonry-2() {
  .views-row:nth-of-type(4n+1) {
    .entity-bean {
      background: $gray_1d;
    }
    .group-header {
      background: $gray_1b;
    }
    .group-middle {
      p, li {
        color: $bunker-black;
      }
      a {
        color: $dark-teal;
      }
    }
  }
  .views-row:nth-of-type(4n+2) {
    .entity-bean {
      background: $primary_3;
    }
    .group-header {
      background: $primary_1;
    }
    .group-middle {
      p, li {
        color: $gray_white;
      }
      a {
        color: $primary_1;
      }
    }
  }
  .views-row:nth-of-type(4n+3) {
    .entity-bean {
      background: $secondary_1b;
    }
    .group-header {
      background: $cinnamon;
    }
    .group-middle {
      p, li {
        color: $bunker-black;
      }
      a {
        color: $primary_1;
      }
    }
  }
  .views-row:nth-of-type(4n+4) {
    .entity-bean {
      background: $primary_1;
    }
    .group-header {
      background: $primary_3;
    }
    .group-middle {
      p, li {
        color: $gray_white;
      }
      a {
        color: $aquamarine;
      }
    }
  }
}

@mixin full-width() {
  #main {
    .breadcrumb ol {
      // @include breakpoint($desktop) {
      //   padding: 0 2.5rem;

/**
        @include breakpoint($wide-desktop) {
          padding: 0 1rem;
        }
**/
      // }
    }
    .main__inner-container {
      padding: 0;
      max-width: none;

/**

      @include breakpoint($masonry-mobile) {
        margin-bottom: 0;
      }

**/
      #content {
        max-width: none;

        .view-mode-full, .page__title {
          max-width: 960px;
          padding: 0 2.5rem;
          margin-left: auto;
          margin-right: auto;

          .field--body {
            max-width: 880px;
            // margin-bottom: 4rem;

            p {
              font-size: 1.3rem;
              line-height: 1.7rem;

              &:last-child {
                padding-bottom: 0;
              }
            }
          }
          //changed from 0 1rem for tools landing
/**
          @include breakpoint($desktop) {
            padding: 0 1rem;
          }
**/
        }
      }
    }
  }
}

//mixin for full-width calc
@mixin calc-full-width() {
  width: 100%;

  ul.calculator {
    display: table;

    li {
      display: table-row;
      border-bottom: none;

      .calculator__left {
        width: 52.5%;
        display: table-cell;
        // border-right: 2px solid $gray_white;
        text-align: left;
      }

      .calculator__right {
        width: 47.5%;
        display: table-cell;
        vertical-align: middle;
      }

      &.combined-calc__two .calculator__left {
        padding-bottom: 2rem;
      }
    }
  }

  .calculator__results {
    .calculator__results-amount {
      display: block;
      @include font-weight-color-size($font_primary, $font_primary_weight_bold, $gray_white, 2.8);
      line-height: 3.4rem;
      width: 380px;
      .amount {
        display: block;
        // float: right;
        position: absolute;
        right: 2.5rem;
        top: 102px;
        // text-align: right;
        @include font-weight-color-size($font_primary, $font_primary_weight_bold, $gray_white, 4.0);
        line-height: 4.8rem;
      }
    }
  }
}


//Simple mixin for applying font styles
@mixin font-weight-color-size($font, $weight, $color, $size) {
  font-family: $font;
  font-weight: $weight;
  color: $color;
  font-size: #{$size}px;
}


.show-for-sr {
  text-indent: -9999px;
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0
}